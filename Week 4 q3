#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next)
        temp = temp->next;
    temp->next = newNode;
    newNode->prev = temp;
}

struct Node* deleteAllX(struct Node* head, int x) {
    struct Node* temp = head;
    while (temp) {
        if (temp->data == x) {
            struct Node* toDelete = temp;
            if (temp->prev)
                temp->prev->next = temp->next;
            else
                head = temp->next;
            if (temp->next)
                temp->next->prev = temp->prev;
            temp = temp->next;
            free(toDelete);
        } else {
            temp = temp->next;
        }
    }
    return head;
}

void printList(struct Node* head) {
    while (head) {
        printf("%d <-> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    int n, val, x;
    
    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    printf("Enter %d values:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &val);
        insertEnd(&head, val);
    }

    printf("Original List: ");
    printList(head);

    printf("Enter value to delete: ");
    scanf("%d", &x);

    head = deleteAllX(head, x);

    printf("Updated List: ");
    printList(head);

    return 0;
}
