#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int u, v, weight;
} Edge;

Edge edges[MAX];
int parent[MAX];
int n, e;

int compare(const void *a, const void *b) {
    return ((Edge *)a)->weight - ((Edge *)b)->weight;
}

int find(int i) {
    while (i != parent[i])
        i = parent[i];
    return i;
}

void unionSet(int a, int b) {
    int rootA = find(a);
    int rootB = find(b);
    parent[rootA] = rootB;
}

int kruskalMST() {
    int mstWeight = 0;
    int count = 0;

    qsort(edges, e, sizeof(Edge), compare);

    for (int i = 0; i < n; i++)
        parent[i] = i;

    for (int i = 0; i < e && count < n - 1; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].weight;

        if (find(u) != find(v)) {
            unionSet(u, v);
            mstWeight += w;
            count++;
        }
    }

    return mstWeight;
}

int main() {
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);

    for (int i = 0; i < e; i++) {
        printf("Enter edge %d (u v weight): ", i + 1);
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].weight);
    }

    int totalWeight = kruskalMST();
    printf("Total weight of Minimum Spanning Tree: %d\n", totalWeight);

    return 0;
}
